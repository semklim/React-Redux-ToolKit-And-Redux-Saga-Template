/**
 * @fileoverview Redux slice for films.
 * @module redux/filmSlice
 */

import { createSlice } from "@reduxjs/toolkit";

/**
 * @typedef {Object} Film
 * @property {string} Title - The title of the film.
 * @property {string} Year - The year the film was released.
 * @property {string} imdbID - The IMDb ID of the film.
 * @property {string} Type - The type of the film (e.g., movie, series, episode).
 * @property {string} Poster - The URL to the poster of the film.
 */

/**
 * @typedef {Object} FilmState
 * @property {Film[]} films - Array of films.
 * @property {boolean} isLoading - Indicates if films are currently being loaded.
 */

/**
 * Initial state for the films slice.
 * @type {FilmState}
 */
const initialState = {
  films: [],
  isLoading: false,
};

/**
 * Redux slice for films.
 * @type {import("@reduxjs/toolkit").Slice<FilmState>}
 */
export const filmSlice = createSlice({
  name: 'films',
  initialState,
  reducers: {
    /**
     * Action creator to set the isLoading state to true.
     * @function
     * @param {FilmState} state - The current state.
     */
    getFilms: (state) => {
      state.isLoading = true;
    },

    /**
     * Action creator to handle successful retrieval of films.
     * @function
     * @param {FilmState} state - The current state.
     * @param {import("@reduxjs/toolkit").PayloadAction<{ Search: Film[] }>} action - The action containing the payload with an array of films.
     */
    getFilmsSuccess: (state, action) => {
      state.films = action.payload.Search;
      state.isLoading = false;
    },

    /**
     * Action creator to handle failure in retrieving films.
     * @function
     * @param {FilmState} state - The current state.
     * @param {import("@reduxjs/toolkit").PayloadAction<any>} action - The action containing the error payload.
     */
    getFilmsFailure: (state, action) => {
      state.isLoading = false;
      console.log(action.payload);
    },
  },
});

/**
 * Action creators generated by the film slice.
 * @type {Object}
 */
export const { getFilms, getFilmsSuccess, getFilmsFailure } = filmSlice.actions;

/**
 * The reducer for the film slice.
 * @type {import("@reduxjs/toolkit").Reducer<FilmState>}
 */
export default filmSlice.reducer;
